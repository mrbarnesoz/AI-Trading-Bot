Metadata-Version: 2.4
Name: ai-trading-bot
Version: 0.1.0
Summary: AI-assisted trading bot with data pipeline, ML model training, and backtesting utilities.
Author: AI Trading Bot Maintainers
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.24
Requires-Dist: pandas>=2.0
Requires-Dist: scikit-learn>=1.3
Requires-Dist: yfinance>=0.2.30
Requires-Dist: pyyaml>=6.0
Requires-Dist: joblib>=1.3
Provides-Extra: dev
Requires-Dist: pytest>=7.4; extra == "dev"
Requires-Dist: pytest-cov>=4.1; extra == "dev"
Requires-Dist: black>=23.7; extra == "dev"
Requires-Dist: ruff>=0.1.9; extra == "dev"

# AI Trading Bot

An end-to-end reference implementation of an AI-assisted trading bot. The app provides utilities to download OHLCV data, engineer technical indicator features, train a machine learning classifier, and evaluate the strategy via vectorised backtesting.

## Key Capabilities
- Automated data download and caching via `yfinance`.
- Technical indicator feature engineering (SMA, EMA, RSI, MACD, volatility, volume).
- Random forest model trained to predict next-period positive returns.
- Probability-driven long/flat signal generation with configurable thresholds.
- Backtesting module with trading costs, Sharpe ratio, win-rate, and max drawdown reporting.
- CLI scripts and VS Code tasks for repeatable workflows.

## Project Structure
```
├── config.yaml              # Central configuration for data, model, and strategy
├── pyproject.toml           # Python project metadata and dependencies
├── scripts/                 # Convenience entrypoints for common workflows
├── src/ai_trading_bot/      # Core package code (data, features, model, strategy, backtest)
├── data/                    # Cached raw/processed data (ignored by git)
├── models/                  # Persisted model artifacts (ignored by git)
├── logs/                    # Log output (ignored by git)
└── tests/                   # Pytest-based unit tests
```

## Getting Started
1. **Prerequisites**
   - Python 3.10+ (recommended 3.11 for best library support)
   - pip
   - (Optional) Git for version control

2. **Create a virtual environment**
   ```powershell
   python -m venv .venv
   .\.venv\Scripts\Activate.ps1  # use source .venv/bin/activate on macOS/Linux
   ```

3. **Install dependencies**
   ```powershell
   python -m pip install --upgrade pip
   python -m pip install -e .[dev]
   ```

4. **(Optional) Configure VS Code**
   - Open the workspace folder in VS Code.
   - Accept the prompt to use the interpreter at `.venv\Scripts\python.exe`.
   - Use the provided tasks (`Terminal > Run Task…`) for training, backtesting, or running tests.

## Usage
Run all commands from the project root with your virtual environment activated.

- **Download data**
  ```powershell
  python scripts/download_data.py --symbol AAPL --force
  ```
  Cached files are written to `data/raw/`. Adjust defaults in `config.yaml`.

- **Train the model**
  ```powershell
  python -m ai_trading_bot train
  ```
  Metrics are printed as JSON and the trained model is saved to `models/price_direction_model.joblib`.

- **Backtest the strategy**
  ```powershell
  python -m ai_trading_bot backtest --threshold 0.6
  ```
  Summary statistics are returned in JSON; detailed performance (including equity curve) lives in-memory, but you can persist it by extending the script.

- **Run tests**
  ```powershell
  python -m pytest
  ```

## Configuration
Fine-tune behaviour through `config.yaml`. Key fields include:
- `data`: symbol, date range, interval, and caching location.
- `features`: indicator types and window sizes.
- `model`: hyperparameters for the random forest classifier.
- `backtest`: capital, transaction cost, and risk-free rate assumptions.
- `pipeline`: prediction horizon (`lookahead`) and target column name.

## Extending the Bot
- Swap in alternative models by modifying `src/ai_trading_bot/models/predictor.py`.
- Add new indicators to `features/indicators.py` and list them in `config.yaml`.
- Implement new strategies in `strategies/` and wire them into `pipeline.py`.
- Persist detailed backtest analytics (drawdown curves, trade list, etc.) from `backtesting/simulator.py`.

## Troubleshooting
- **`ModuleNotFoundError: No module named 'pytest'`** — ensure dependencies are installed with `python -m pip install -e .[dev]`.
- **`ValueError: No data retrieved for symbol`** — verify ticker/interval combinations are supported by Yahoo Finance and you have network connectivity.
- **Signals look empty** — confirm the probability threshold is not set too high; try `--threshold 0.5`.

## Licensing
This project is provided as reference code; adapt it for educational or personal trading experiments. Always validate strategies on out-of-sample data and understand the risks of live trading.
